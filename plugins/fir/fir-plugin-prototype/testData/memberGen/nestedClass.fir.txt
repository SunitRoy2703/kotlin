FILE: nestedClass.kt
    public final fun <T> R|T|.also(block: R|(T) -> kotlin/Unit|): R|T| {
        ^also this@R|/also|
    }
    @R|org/jetbrains/kotlin/fir/plugin/WithNestedFoo|() public final class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        private final fun test(): R|A.Foo| {
            ^test <Resolution to classifier>#().<None of the following candidates is applicable because of receiver type mismatch: [/also]>#<R|A.Foo|>(<L> = also@fun <anonymous>(it: R|A.Foo|): R|kotlin/Unit| <inline=Unknown>  {
                R|<local>/it|.<Unresolved name: hello>#()
            }
            )
        }

        private final inner class Foo {
            public constructor(): R|A.Foo|

            public final fun hello(): R|kotlin/Int|

        }

    }
    public final class B : R|kotlin/Any| {
        public constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        private final fun test(): <ERROR TYPE REF: Symbol not found for Foo> {
            ^test <Unresolved name: Foo>#().<None of the following candidates is applicable because of receiver type mismatch: [/also]>#<R|ERROR CLASS: Cannot infer argument for type parameter T|>(<L> = also@fun <anonymous>(it: <ERROR TYPE REF: Cannot infer argument for type parameter T>): R|kotlin/Unit| <inline=Unknown>  {
                R|<local>/it|.<Unresolved name: hello>#()
            }
            )
        }

    }
